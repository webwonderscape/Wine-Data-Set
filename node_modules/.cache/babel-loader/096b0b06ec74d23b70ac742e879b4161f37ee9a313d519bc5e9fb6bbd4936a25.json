{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\react\\\\Testing\\\\myapp\\\\src\\\\components\\\\UtilityCalculations\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport Context from '../Context/Context';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction groupByAlcohol(data) {\n  const groupedData = {};\n  data.forEach(item => {\n    const alcoholValue = item[\"Alcohol\"];\n    if (!groupedData[alcoholValue]) {\n      groupedData[alcoholValue] = [];\n    }\n    groupedData[alcoholValue].push(item);\n  });\n  return groupedData;\n}\nfunction calculateMean(data) {\n  const sum = data.reduce((acc, value) => acc + value, 0);\n  const mean = sum / data.length;\n  return mean.toFixed(3);\n}\nfunction calculateMedian(data) {\n  const sortedData = data.slice().sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedData.length / 2);\n  if (sortedData.length % 2 === 0) {\n    const median = (sortedData[middleIndex - 1] + sortedData[middleIndex]) / 2;\n    return median.toFixed(3);\n  } else {\n    return sortedData[middleIndex].toFixed(3);\n  }\n}\nfunction calculateMode(data) {\n  const frequencyMap = {};\n  data.forEach(value => {\n    if (!frequencyMap[value]) {\n      frequencyMap[value] = 1;\n    } else {\n      frequencyMap[value]++;\n    }\n  });\n  let maxFrequency = 0;\n  let mode = [];\n  for (const value in frequencyMap) {\n    if (frequencyMap[value] > maxFrequency) {\n      maxFrequency = frequencyMap[value];\n      mode = [value];\n    } else if (frequencyMap[value] === maxFrequency) {\n      mode.push(value);\n    }\n  }\n  if (mode.length === Object.keys(frequencyMap).length) {\n    return 'No mode';\n  }\n  return mode.join(', ');\n}\nfunction calculateGamma(item) {\n  return item[\"Ash\"] * item[\"Hue\"] / item[\"Magnesium\"];\n}\nfunction FlavanoidsTable({\n  groupedData\n}) {\n  const classNames = Object.keys(groupedData);\n  const measure = 'Flavanoids';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [measure, \" Table\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Measure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this), classNames.map(className => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: [\"Class \", className]\n          }, className, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: [measure, \" Mean\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this), classNames.map(className => {\n            const classData = groupedData[className].map(item => item[measure]);\n            const mean = calculateMean(classData);\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: mean\n            }, `${measure}-mean-${className}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 24\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: [measure, \" Median\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), classNames.map(className => {\n            const classData = groupedData[className].map(item => item[measure]);\n            const median = calculateMedian(classData);\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: median\n            }, `${measure}-median-${className}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 24\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: [measure, \" Mode\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this), classNames.map(className => {\n            const classData = groupedData[className].map(item => item[measure]);\n            const mode = calculateMode(classData);\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: mode\n            }, `${measure}-mode-${className}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 24\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 7\n  }, this);\n}\n_c = FlavanoidsTable;\nfunction GammaTable({\n  groupedData\n}) {\n  const classNames = Object.keys(groupedData);\n  const measure = 'Gamma';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [measure, \" Table\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Measure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this), classNames.map(className => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: [\"Class \", className]\n          }, className, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: [measure, \" Mean\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 15\n          }, this), classNames.map(className => {\n            const classData = calculateGamma(groupedData[className]);\n            const mean = calculateMean(classData);\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: mean\n            }, `${measure}-mean-${className}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 24\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: [measure, \" Median\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this), classNames.map(className => {\n            const classData = calculateGamma(groupedData[className]);\n            const median = calculateMedian(classData);\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: median\n            }, `${measure}-median-${className}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 24\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: [measure, \" Mode\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 15\n          }, this), classNames.map(className => {\n            const classData = calculateGamma(groupedData[className]);\n            const mode = calculateMode(classData);\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: mode\n            }, `${measure}-mode-${className}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 24\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 7\n  }, this);\n}\n_c2 = GammaTable;\nconst UtilityCalculations = () => {\n  _s();\n  const data = useContext(Context);\n  const groupedData = groupByAlcohol(data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FlavanoidsTable, {\n      groupedData: groupedData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GammaTable, {\n      groupedData: groupedData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n};\n_s(UtilityCalculations, \"QDbvtl2XjZhCafbmMBOV/hNJip4=\");\n_c3 = UtilityCalculations;\nexport default UtilityCalculations;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"FlavanoidsTable\");\n$RefreshReg$(_c2, \"GammaTable\");\n$RefreshReg$(_c3, \"UtilityCalculations\");","map":{"version":3,"names":["React","useContext","Context","jsxDEV","_jsxDEV","groupByAlcohol","data","groupedData","forEach","item","alcoholValue","push","calculateMean","sum","reduce","acc","value","mean","length","toFixed","calculateMedian","sortedData","slice","sort","a","b","middleIndex","Math","floor","median","calculateMode","frequencyMap","maxFrequency","mode","Object","keys","join","calculateGamma","FlavanoidsTable","classNames","measure","children","fileName","_jsxFileName","lineNumber","columnNumber","map","className","classData","_c","GammaTable","_c2","UtilityCalculations","_s","_c3","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/react/Testing/myapp/src/components/UtilityCalculations/index.js"],"sourcesContent":["import React, {useContext} from 'react'\r\nimport Context from '../Context/Context';\r\nimport './index.css'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction groupByAlcohol(data){\r\n    const groupedData = {}\r\n    data.forEach(item=>{\r\n        const alcoholValue = item[\"Alcohol\"];\r\n       \r\n        if(!groupedData[alcoholValue]){\r\n            groupedData[alcoholValue]=[]\r\n        }\r\n        groupedData[alcoholValue].push(item)\r\n        \r\n    })\r\n    return groupedData;\r\n}\r\n\r\n\r\n\r\nfunction calculateMean(data) {\r\n    const sum = data.reduce((acc, value) => acc + value, 0);\r\n    const mean = sum / data.length;\r\n    return mean.toFixed(3);\r\n  }\r\n  \r\n  function calculateMedian(data) {\r\n    const sortedData = data.slice().sort((a, b) => a - b);\r\n    const middleIndex = Math.floor(sortedData.length / 2);\r\n  \r\n    if (sortedData.length % 2 === 0) {\r\n      const median = (sortedData[middleIndex - 1] + sortedData[middleIndex]) / 2;\r\n      return median.toFixed(3);\r\n    } else {\r\n      return sortedData[middleIndex].toFixed(3);\r\n    }\r\n  }\r\n  \r\n  function calculateMode(data) {\r\n    const frequencyMap = {};\r\n    data.forEach(value => {\r\n      if (!frequencyMap[value]) {\r\n        frequencyMap[value] = 1;\r\n      } else {\r\n        frequencyMap[value]++;\r\n      }\r\n    });\r\n  \r\n    let maxFrequency = 0;\r\n    let mode = [];\r\n  \r\n    for (const value in frequencyMap) {\r\n      if (frequencyMap[value] > maxFrequency) {\r\n        maxFrequency = frequencyMap[value];\r\n        mode = [value];\r\n      } else if (frequencyMap[value] === maxFrequency) {\r\n        mode.push(value);\r\n      }\r\n    }\r\n  \r\n    if (mode.length === Object.keys(frequencyMap).length) {\r\n      return 'No mode';\r\n    }\r\n  \r\n    return mode.join(', ');\r\n  }\r\n\r\n\r\n  function calculateGamma(item) {\r\n    return (item[\"Ash\"] * item[\"Hue\"]) / item[\"Magnesium\"];\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  function FlavanoidsTable({ groupedData }) {\r\n    const classNames = Object.keys(groupedData);\r\n    const measure = 'Flavanoids';\r\n  \r\n    return (\r\n      <div>\r\n        <h2>{measure} Table</h2>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Measure</th>\r\n              {classNames.map(className => (\r\n                <th key={className}>Class {className}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>{measure} Mean</td>\r\n              {classNames.map(className => {\r\n                const classData = groupedData[className].map(item => item[measure]);\r\n                const mean = calculateMean(classData);\r\n                return <td key={`${measure}-mean-${className}`}>{mean}</td>;\r\n              })}\r\n            </tr>\r\n            <tr>\r\n              <td>{measure} Median</td>\r\n              {classNames.map(className => {\r\n                const classData = groupedData[className].map(item => item[measure]);\r\n                const median = calculateMedian(classData);\r\n                return <td key={`${measure}-median-${className}`}>{median}</td>;\r\n              })}\r\n            </tr>\r\n            <tr>\r\n              <td>{measure} Mode</td>\r\n              {classNames.map(className => {\r\n                const classData = groupedData[className].map(item => item[measure]);\r\n                const mode = calculateMode(classData);\r\n                return <td key={`${measure}-mode-${className}`}>{mode}</td>;\r\n              })}\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  function GammaTable({ groupedData }) {\r\n    const classNames = Object.keys(groupedData);\r\n    const measure = 'Gamma';\r\n  \r\n    return (\r\n      <div>\r\n        <h2>{measure} Table</h2>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Measure</th>\r\n              {classNames.map(className => (\r\n                <th key={className}>Class {className}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>{measure} Mean</td>\r\n              {classNames.map(className => {\r\n                const classData = calculateGamma(groupedData[className]);\r\n                const mean = calculateMean(classData);\r\n                return <td key={`${measure}-mean-${className}`}>{mean}</td>;\r\n              })}\r\n            </tr>\r\n            <tr>\r\n              <td>{measure} Median</td>\r\n              {classNames.map(className => {\r\n                const classData = calculateGamma(groupedData[className]);\r\n                const median = calculateMedian(classData);\r\n                return <td key={`${measure}-median-${className}`}>{median}</td>;\r\n              })}\r\n            </tr>\r\n            <tr>\r\n              <td>{measure} Mode</td>\r\n              {classNames.map(className => {\r\n                const classData = calculateGamma(groupedData[className]);\r\n                const mode = calculateMode(classData);\r\n                return <td key={`${measure}-mode-${className}`}>{mode}</td>;\r\n              })}\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst UtilityCalculations=()=>{\r\n    const data = useContext(Context);\r\n    const groupedData = groupByAlcohol(data)\r\n    \r\n\r\nreturn(\r\n    <div>\r\n      <FlavanoidsTable groupedData={groupedData} />\r\n      <GammaTable groupedData={groupedData} />\r\n    </div>\r\n\r\n)\r\n}\r\nexport default UtilityCalculations"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}